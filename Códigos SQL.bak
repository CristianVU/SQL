#FOREIGN KEY para relacionar dos tablas

CREATE TABLE IF NOT EXISTS exams(
id SERIAL PRIMARY KEY,
subject VARCHAR(255) NOT NULL,
score DECIMAL NOT NULL,
student_id INT NOT NULL,
CONSTRAINT FK_student_id FOREIGN KEY (student_id) REFERENCES students(id)
)

student_id de la tabla exams va a tener que ser un número de id de la tabla students


#LEFT JOIN
Crear un conjunto de datos que une la información de dos (o más) tablas a través de una condición.
Une lo que puede de la TABLA ORIGINAL con todo lo que se encuentra en la TABLA OBJETIVO, por la IZQUIERDA. Cumpliendo una condición.

ej. Unir siempre que la ID de un estudiante sea igual a la student_id en la otra tabla:

SELECT * FROM public.students
LEFT JOIN public.exams
ON public.students.id=public.exams.students_id

Puedo filtrar usando WHERE:

SELECT * FROM public.students
LEFT JOIN public.exams
ON public.students.id = public.exams.student_id
WHERE public.students.age<32

Puedo Llamar de una manera sencilla una tabla para no tener que estar escribiendo "public....."
ej.

SELECT * FROM public.students s
LEFT JOIN public.exams e
ON s.id = e.student_id
WHERE s.age<32

Puedo especificar qué columnas quiero traerme de una tabla antes de hacer el left JOIN y ordenarlas a mi gusto:

SELECT id,age,name FROM public.students s ............

o también abreviando cada columna:

SELECT s.id as id,s.name as name, s.age as age,
e.subject as subject, e.score as score
FROM publics.students s
LEFT JOIN public.exams e
ON s.id=e.student_id

Puedo hacer varios JOINS seguidos uno luego del otro, en la misma query.

#INNER JOIN
Cuando queremos cruzar varias tablas relacionadas entre sí, pero sólo los datos que cumplan una condición...
Las tablas se van a unir, y solo voy a tener lo que coinciden en ambas tablas. Para buscar algo puntual y rápido, es mejor.
Left join da un pool de información, muestra todo. Inner join filtra, quita lo que no coincide entre ambas tablas.

SELECT * FROM public.students s
INNER JOIN public.exams e
ON s.id=e.student_id
WHERE e.subject ILIKE ('%SQL')

#AFTER TABLE
Cuando queramos modificar la estructura de una tabla ya existente. Ej. agregar una columna pero antes quitar los null.

ALTER TABLE public.students
ADD COLUMN surname VARCHAR(255)

UPDATE public.students
SET surname='undefined'
WHERE surname IS NULL

ALTER TABLE public.students s
ALTER COLUMN surname SET NOT NULL

Para cambiar el tipo de columna:
ALTER TABLE public.students
ALTER COLUMN name TYPE VARCHAR(250)

Para eliminar una columna:
ALTER TABLE public.students
DROP COLUMN

#ADD A CONSTRAINT

ALTER TABLE tablename ADD CONSTRAINT
ADD PRIMARY KEY (ID)

#CRUD (create, read, update and delete)

CREATE TABLE Usuarios (id INT,nombre VARCHAR(50),edad INT)

INSERT INTO nombre_de_tabla (columna1, columna2, columna3, ...)
VALUES (valor1, valor2, valor3, ...);

DELETE FROM nombre_de_tabla
WHERE condicion;

SELECT * FROM tablename
SELECT columna1,columna2 FROM tablename
SELECT * FROM personas WHERE edad < 30

UPDATE courses
SET published_date = '2020-08-01' 
WHERE course_id = 3

Al final del code se puede poner RETURNING * para ver la fila que se cambiaron los datos.
